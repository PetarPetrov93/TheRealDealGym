@model AllTrainersQueryModel
@using Microsoft.AspNetCore.Identity;
@using static TheRealDealGym.Core.Constants.AdminConstants;
@inject UserManager<ApplicationUser> userManager;
@inject ITrainerService trainerService;

@{
    ViewBag.Title = "Staff";
}

<link rel="stylesheet" href="~/css/Common/DropDown.css" />
<link rel="stylesheet" href="~/css/Common/Buttons.css" />

<h2 class="text-center">@ViewBag.Title</h2>
<hr />

<form method="get">
    <div class="form-group col-md-3">
        <div class="form-group">
            <label asp-for="OrderBy"></label>
            <select asp-for="OrderBy" class="form-control">
                <option value="0">Name Ascending</option>
                <option value="1">Name Descending</option>
            </select>
        </div>
    </div>

    <div class="col-md-3">
        <div class="form-group mt-4 p-2">
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>
    </div>
</form>


@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalTrainersCount /
        Model.TrainersPerPage);
}

<div class="row mb-5">
    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
        <a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="Staff"
           asp-action="Index"
           asp-route-currentPage="@previousPage"
           asp-route-sorting="@((int)Model.OrderBy)"><<</a>
    </div>

    @{
        var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
        !Model.Trainers.Any();
    }

    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
        <a class="btn btn-primary
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="Staff"
           asp-action="Index"
           asp-route-currentPage="@(Model.CurrentPage + 1)"
           asp-route-sorting="@((int)Model.OrderBy)">>></a>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th><label>Full Name</label></th>
            <th><label>Details</label></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainer in Model.Trainers)
        {
            var userId = await trainerService.GetUserIdByTrainerIdAsync(trainer.Id);
            var user = await userManager.FindByIdAsync(userId.ToString());

            <tr>
                <td><label>@trainer.FullName</label></td>
                <td>
                    <form asp-controller="Staff" asp-action="Details" method="get">
                        <input type="hidden" name="trainerId" value="@trainer.Id">
                        <button type="submit" class="btn btn-primary">Details</button>
                    </form>
                </td>
                @if (await userManager.IsInRoleAsync(user, AdminRole) == false)
                {
                    <td>
                        <form asp-controller="Staff" asp-action="MakeAdmin" method="post">
                            <input type="hidden" name="trainerId" value="@trainer.Id">
                            <button type="submit" class="btn btn-success cfg-make-admin" onclick="return confirm('Are you sure you want to make @trainer.FullName Admin?')">Make Admin</button>
                        </form>
                    </td>
                }
                else
                {
                    <td><label>Admin</label></td>
                }
            </tr>
        }
    </tbody>
</table>
